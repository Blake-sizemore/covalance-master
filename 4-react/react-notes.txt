Set up for working React interface

Level 1
        Node JS
            install Node JS (nodejs.org) and use LTS to start
            check versions with node -v, npx -v, and npm -v
            do not forget about NVM
        https://nodejs.org/en

        React is a library built by Facebook to make development smoother and less backend heavy
            inside of React is create-react-app library which we use here.
            also check our Next.JS and Gatsby.js later on.
        https://react.dev/ 

        Backend/ UndertheHood  items:
            Babel - Transpiler - you can write modern JavaScript code (ES6, ES7, and beyond!) that will be transpiled into JavaScript that older browsers can understand
            WebPack - packager/bundler - write your code and components in separate files/modules, and import/export them as necessary

        How to use and install create-react-app set-up.
            using a  terminal navigate to said project folder.
            use:
                npx create-react-app "name"
                cd "name"
                npm start

            Always remember to "npm start" inside of the created folder made by: 
            npx create-react-app "name" action

    # Err log: 
        New error -'react-scripts' is not recognized as an internal or external command, operable program or batch file.

        Fix:
        1. npm i -g react-scripts
        2.  New error -> Error: Cannot find module 'react'
        3. fix npm i react react-dom @types/react @types/react-dom
        4. Working!
    
    # What is ReactJS
        Open Source JS Library
        A way of thinking in component base UI

        what is a component:
            a JavaScript Function that returns a JSX 
            they are imported and exported.
            saved js files
            emmets are being used
        
        what is JSX : javescript eXtended
            snytax sugar that looks like html.
                JSX
                <h1 className="name"> This is the way.</h1> 
                == 
                REACT
                React.createElement('h1',{className:'name'},'this is the way');

    Parts and details of the boilerplate
        node_modules 
            - ALOT OF UNDER THE HOOD
        public
            manifest.js - remove
            robot.txt - remove
            2 x .png - remove
            favicon.ico - remove
            index.html - keep
        .gitignore
        src
            App.js - remove
            index.js - Need
            AppTest.js
            setupWebVitals.js
            setupTest.js
        
            App.css
            index.css

            logo.svg
        package-lock.json
        package.json - instructional details for correct import/export usage (under the hood)
        ReadMe.md - Provides terminal commads for create-react-app items

    Basic Rules for using JSX in javescript
        1. use: 
            import React from 'react'; ***
                footnote: if you write your own you have to write this. if you use create-react-app or next-JS this is not required.
                use it anyways for now.  ditch it later on once it is habit
        2. if you are returning mutiply lines of JSX place them all inside of return ( );
        3. You can only return ONE THING that means ONE Parent element, wrap them all up in a div
            Welcome to Fragments or shadow DIV
                React.Fragment - 2019 update
                return (<><h1></h1></>)
        4. in JS files make component names (const) with a CAPITAL LETTER

    Displaying on screen - See files in "src" -> index.js

        React 17 version control
            import ReactDOM from 'react-dom'
            import ReactDOM from 'react-dom/client';

            const App = () => {
                return (
                    <div>
                        <h1 className="creed">This is the way.</h1>
                        <h3>Iâ€™m a Mandalorian. Weapons are part of my religion.</h3>
                    </div>
                );
            };

            ReactDOM.render(
                <React.StrictMode>
                    <App />
                <React.StrictMode>,
            document.getElementById('root')
            );
            
        React 18 version control
            import React from "react";
            import {createroot } from "react-dom/client";
            import **
            
            createRoot(document.getElementById("root")).render(
                <React.StrictMode>
                    <App />
                <React.StrictMode>,
            document.getElementById('root')
            )
    Styled components
        https://styled-components.com/

    components and props

    props = propertires
    props are inmutable (unchanging)

    props with ES6 destructor = ({name, favorite show})

    escape JSX using {} think of the role

Level 2
    API - application programable Interface
        defined method of interacting with another software system
        Communication across internet
            Weather data, third-party login, PAYPAL, DOM MODELS

            DOMS ARE APIs!!!
        
        API use the DNS - 
            Domain Name system = 
            google.com (domain name) = 74.125.21.100 (domain IPS)

        TCP - Transmission Control Protocol ( The sender and the shredder and the Organizer )
            Low Level
            Protocol that takes DNS request and transforms the deleivery into packets
            packets travel different route and get delivered in unorganized fashion 
            "You write letter and it gets shredded and mailed out"

        Http  - hyper Text Transfer Protocol
            Higher Level

        Https ( secure server ) -

    Http Request - 
        destination address
        a verb - methods ( get, post, put, delete )
        header - meta - content type
        other data - images, tags

        get - retrive from remote destination, load a webpage RETRIVE
        post - sumbit new data to a destination NEW 
        put - submit data to destination typically EDIT
        delete - pretty clear
        Patch - 

    Http Responses -
        destination address
        header - CONTENT  TYPE ( what are you getting ) and Status Code ( what occured )
        other data - images, tags

        Status Code
            200's - Success
            300's - Redirection
            400's - Error, wrong address - User  going to a place not allowed or not existed 
            500's - Error, server error - developer made an error code
        
        Content type
            tells us what we are sending or recieving

        JSON - EVERYTHING IN "" DBL quote
            data transport structure
            used for packaging
            popular for NODE.JS
            server side langauge 

            JS object:
            const example = {
                key: 'value'
            }

            JSON
            {
                "key":"value"
            }

        JSON.parse();
            means read the JSON item
        JSONstringify();
            creating and packaging

    REST - Representational State Transfer
        guidelines for writing web application ( server and sites )
        helps other know what you wrote with out talking to you

        RESTful API 
            base URL for web API
            Internet Media type of supported data, most often JSON
            operation of the API ( verbs )

        Endpoints 

    Making API request and HTTP Request
        All request are ASYNC

        Jquery function AJAX 
            Async JS and XML 
                Older way of taking care of 
            
            AJAX is still the term for
        
            AJAX returns a promise

            Examples of a Request
                $.ajax({
                    type: 'GET',
                    url: 'https://jsonplaceholder.typicode.com/posts/'
                })
                    .then(allPosts =>{
                        console.log(allPost);
                    })
                    .catch(error => {
                        console.log(error);
                    })

            Examples of a post
                $.ajax({
                    type: 'POST',
                    url: 'https://jsonplaceholder.typicode.com/posts/',
                    contentType: 'application/json',
                    data: JSON.stingify(newPostObj)
                })
                    .then(successfulResponse =>{
                        console.log(successfulResponse);
                    })
                    .catch(error => {
                        console.log(error);
                    })
        
        Javscript Fetch!
            a Browswer based API that provides a JavaScript interface for HTTP pipeline
            Must be apart of JS file , IE index.js react file is ok. any other file type will need to be imported.

            Request 
            fetch('url)
                .then(response => {
                    console.log(response);
                    return response.json();
                })
                .then(allPosts => {
                    console.log(allPosts )
                })

            POST
            fetch('url',{
                method:'POST',
                headers: {
                    'Content-Type':application/json'
                },
                body: JSON.stringify(newPostObj)
            })
                .then(response => {
                    console.log(response);
                    return response.json();
                })
                .then(allPosts => {
                    console.log(allPosts )
                })

Level 3 -  Front end routing - V6/V5
    React Routing v6
        how to avoid else if staments
    
    install react-router-dom
        npm i react-router-dom
    install bootstrap as well
        modifying style sheets using SASS
        npm i bootstrap
    
    basics
        import {BrowserRouter, routes, routes} from 'react-router-dom';
            BrowserRouter -  must wrap all components and be first thing in return
            Routes - wraps individual route component and ensures. Magic Work hours
            Route - define the path and tell which
            Link - replaces a href link for internal linkage
        
        <BrowserRouter>
            <NavBar />
            <main className="">
                <Routes>
                    <Route path="/" element={component} />
                    <Route path="/users" element={component} />
                    <Route path="/users/:todos" element={component} />
                    <Route path="/" element={component} />
                </Routes>
            </main>
        <BrowserRouter>
            
        Access Parameters in components

            import { useParms }  from 'react-router-dom

            const u

